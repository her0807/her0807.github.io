{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/architecture","result":{"pageContext":{"currentCategory":"architecture","categories":["All","etc","spring","독서","java","보안","architecture","cs","개발독서","db"],"edges":[{"node":{"id":"62cd453a-3ed8-599d-9371-3607bdaa920d","excerpt":"MSA(Micro Service Architecture)란 ?  디자인 패턴입니다. 완전히 독립적으로 배포가 가능하기 때문에 다른 기술 스택을 사용할 수 있어요. 모놀리식 구조(Monolithic Architecure) 를 말합니다. 관리가 쉬우며 초기 배포 단계에 설정할 것이 많지 않아서 MSA 보다 비교적 간단하게 서버 운영이 가능합니다. :) 모놀리식 구조 문제점 부분 장애가 전체 서비스 장애로 이어진다. 모놀리식 구조를 가진 프로젝트를 했을 당시,  회원 가입 로직에서 문제가 생겨 서버가 다운된 적이 있습니다.   혹은 갑자기 트래픽 증가로 인해서 성능에 문제가 생겼을 때, 서비스 전체의 장애로 확대될 수 있어요. 부분적인 scale-out 이 어렵다. 회원 가입은 부하가 자주 일어나지 않지만, 상품 주문은 빈번히 일어나는 작업이죠! 이럴 경우 더 많은 트래픽을 감당할 수 있는 인프라 구조가 필요한데요. 모놀리식 구조의 경우 서버를 나누어 처리할 수 없기 때문에  서비스의 …","fields":{"slug":"/design_pattern/"},"frontmatter":{"categories":"architecture","title":"MSA(MicroService Architecture) 란 무엇인가","date":"December 21, 2022"}},"next":{"fields":{"slug":"/os/"}},"previous":{"fields":{"slug":"/spring2/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}