{"componentChunkName":"component---src-templates-blog-template-js","path":"/java4/","result":{"data":{"cur":{"id":"94c1e1c6-8a98-5681-b96a-4b14f045d382","html":"<h2 id=\"캡슐화란\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94%EB%9E%80\" aria-label=\"캡슐화란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화란?</h2>\n<blockquote>\n<p>객체의 상태와 행위를 외부로 부터 보호합니다. 주로 접근 제어자를 사용하여 구현합니다.</p>\n</blockquote>\n<h3 id=\"왜-캡슐화를-지켜야-하나요\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%BA%A1%EC%8A%90%ED%99%94%EB%A5%BC-%EC%A7%80%EC%BC%9C%EC%95%BC-%ED%95%98%EB%82%98%EC%9A%94\" aria-label=\"왜 캡슐화를 지켜야 하나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 캡슐화를 지켜야 하나요?</h3>\n<p>객체지향적이란, 객체 각각 역할과 책임을 다해야합니다.</p>\n<p>내 상태와 행위를 밖으로 노출시키게 된다면 어떻게 될까요 ?</p>\n<h3 id=\"캡슐화를-지킨-사례\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94%EB%A5%BC-%EC%A7%80%ED%82%A8-%EC%82%AC%EB%A1%80\" aria-label=\"캡슐화를 지킨 사례 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화를 지킨 사례</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Capsule</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Capsule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getHalf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> number <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Capsule</span> capsule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Capsule</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>capsule<span class=\"token punctuation\">.</span><span class=\"token function\">getHalf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"캡슐화가-위반된-사례\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94%EA%B0%80-%EC%9C%84%EB%B0%98%EB%90%9C-%EC%82%AC%EB%A1%80\" aria-label=\"캡슐화가 위반된 사례 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화가 위반된 사례</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Capsule</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Capsule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Capsule</span> capsule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Capsule</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>capsule<span class=\"token punctuation\">.</span><span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2D</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>데이터와, 행위를 하나로 묶고, 그걸 외부에 노출시키지 않는게 왜 중요한가?\n아래와 같이 코드를 작성하더라도 같은 행위가 아닌가?</p>\n<p>캡슐화를 지키기 위한 규칙중에는 <code class=\"language-text\">Tell, Don't Ask</code> 라는 원칙이 있다.\n객체 내부의 데이터를 꺼내와서 처리하는게 아닌, 객체에게 처리할 행위를 요청하라는 행위이다. 이러한 행위를 우리는 “객체에 메세지를 보낸다” 라고 말한다.\n그렇다면 왜 캡슐화를 지키기 위해서는 데이터를 객체로부터 받아와서 처리하면 안된다고 하는걸까? 캡슐화의 장점을 살펴보면 그 이유를 간단히 이해할 수 있다.\n캡슐화를 통해 우리가 얻을 수 있는 이점중 가장 큰것은 코드의 중복을 피할 수 있다는 점과, 데이터를 처리하는 동작 방식을 외부에서 알 필요가 없다는 점이다.</p>\n<p><strong>코드의 중복을 피한다는 점</strong>과, <strong>동작 방식을 외부에서 알 필요가 없다는 것</strong> 또한, 객체지향을 처음 접하면 그게 왜 중요한지 이해가 안될 수 있다. 이럴때는 예제를 통한 설명이 가장 확실하다.</p>\n<p><strong>어떤 물품의 10% 할인된 금액을 구해야 한다고 생각해 보자.</strong> 만일 데이터를 객체에서 받아와서 처리를 한다면 우리는 비즈니스 로직에 다음과 같은 코드를 추가할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Goods</span> goods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> discountedPrice <span class=\"token operator\">=</span> goods<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span>discountedPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>상품의 가격을 가지고 와서 10프로 할인된 가격을 구하고, 다른 로직으로 넘겼다. 즉, 위 코드는 데이터를 객체로 부터 받아와서 처리하는 로직을 구현하고 있다(아마 많이 본 형식의 코드일 것 이다). 그렇다면, 만일 10프로 할인된 금액을 다른 로직에서도 사용하게 된다면 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Goods</span> goods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> discountedPrice <span class=\"token operator\">=</span> goods<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span>discountedPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Goods</span> goods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> discountedPrice <span class=\"token operator\">=</span> goods<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">var2</span><span class=\"token punctuation\">(</span>discountedPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드의 중복이 일어났다. 혹자는 그거 몇줄 안되는 코드 좀 중복 나면 어때?? 라고 생각할 수 있다. 하지만 위와 같은 로직이 서비스에서 수백번 필요하다 생각해 보자… 그걸 일일이 타이핑, 혹은 복붙하는 행위는 고역일 것 이다. 또는, 코드를 작성하는 코더가 변경되었다고 했을 때, 10프로 할인 로직을 아래처럼 작성해 버릴 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Goods</span> goods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> discountedPrice <span class=\"token operator\">=</span> goods<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> goods<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span>discountedPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"그러면-데이터를-처리하는-방식의-외부에-드러나지-않는것은-어떤면에서-이점이-있을까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9F%AC%EB%A9%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%99%B8%EB%B6%80%EC%97%90-%EB%93%9C%EB%9F%AC%EB%82%98%EC%A7%80-%EC%95%8A%EB%8A%94%EA%B2%83%EC%9D%80-%EC%96%B4%EB%96%A4%EB%A9%B4%EC%97%90%EC%84%9C-%EC%9D%B4%EC%A0%90%EC%9D%B4-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\"그러면 데이터를 처리하는 방식의 외부에 드러나지 않는것은 어떤면에서 이점이 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그러면 데이터를 처리하는 방식의 외부에 드러나지 않는것은 어떤면에서 이점이 있을까?</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Goods</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getDiscountedPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> price <span class=\"token operator\">*</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Goods</span> goods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> discountedPrice <span class=\"token operator\">=</span> goods<span class=\"token punctuation\">.</span><span class=\"token function\">getDiscountedPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span>discountedPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>10프로 할인된 금액을 도출하는 로직이 객체 안으로 이동했다. 그에따라 foo()에서 할인된 금액을 생성하는 부분도, 비즈니스 로직이 10프로를 할인 하는게 아닌 Goods에게 “메세지를 보내서(메소드를 호출하여)” 데이터를 가지고 있는 Goods가 스스로 처리하도록 소스가 변경되었다.</p>\n<p>그렇다면 이제 위에서 말했던 문제들을 다시 적용시켜 보자. 위와 같이 할인된 금액을 사용하는 로직이 수백개가 있고, 요구사항이 20프로를 할인하도록 변경됐다. 우리는 무엇을 바꾸면 되는가? getDiscountedPrice()의 로직을 수정하면 된다. 데이터를 처리하는 방식이 외부에 드러나는게 아닌, 객체 스스로 처리하도록 하니 모든 문제가 해결됐다.</p>\n<h1 id=\"수달이-이해한-캡슐화를-지켜야하는이유\" style=\"position:relative;\"><a href=\"#%EC%88%98%EB%8B%AC%EC%9D%B4-%EC%9D%B4%ED%95%B4%ED%95%9C-%EC%BA%A1%EC%8A%90%ED%99%94%EB%A5%BC-%EC%A7%80%EC%BC%9C%EC%95%BC%ED%95%98%EB%8A%94%EC%9D%B4%EC%9C%A0\" aria-label=\"수달이 이해한 캡슐화를 지켜야하는이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수달이 이해한 캡슐화를 지켜야하는이유</h1>\n<ul>\n<li>\n<p>코드의 중복은 변경에 취약하다.\n위에서 말한 할인 정보가 바뀌었을 때 코드가 분산되어있다면,  정책에 따라 모든 코드를 변경해주어야 할 것이다.</p>\n</li>\n<li>\n<p>협력하는 객체가 알아야하는 정보가 적어진다. (객체의 자율성이 보장된다)\n협력하는 객체는 단순히 메세지만 보내면 된다.</p>\n</li>\n</ul>","excerpt":"캡슐화란? 객체의 상태와 행위를 외부로 부터 보호합니다. 주로 접근 제어자를 사용하여 구현합니다. 왜 캡슐화를 지켜야 하나요? 객체지향적이란, 객체 각각 역할과 책임을 다해야합니다. 내 상태와 행위를 밖으로 노출시키게 된다면 어떻게 될까요 ? 캡슐화를 지킨 사례 캡슐화가 위반된 사례 데이터와, 행위를 하나로 묶고, 그걸 외부에 노출시키지 않는게 왜 중요한가?\n아래와 같이 코드를 작성하더라도 같은 행위가 아닌가? 캡슐화를 지키기 위한 규칙중에는  라는 원칙이 있다.\n객체 내부의 데이터를 꺼내와서 처리하는게 아닌, 객체에게 처리할 행위를 요청하라는 행위이다. 이러한 행위를 우리는 “객체에 메세지를 보낸다” 라고 말한다.\n그렇다면 왜 캡슐화를 지키기 위해서는 데이터를 객체로부터 받아와서 처리하면 안된다고 하는걸까? 캡슐화의 장점을 살펴보면 그 이유를 간단히 이해할 수 있다.\n캡슐화를 통해 우리가 얻을 수 있는 이점중 가장 큰것은 코드의 중복을 피할 수 있다는 점과, 데이터를 처리하는 동…","frontmatter":{"date":"December 22, 2022","title":"캡슐화(Encapsulation)란?","categories":"java","author":"수달","emoji":"🙂"},"fields":{"slug":"/java4/"}},"next":{"id":"0d138b16-66d2-568b-abc7-637b55c60ed0","html":"<h2 id=\"학습-동기\" style=\"position:relative;\"><a href=\"#%ED%95%99%EC%8A%B5-%EB%8F%99%EA%B8%B0\" aria-label=\"학습 동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>학습 동기</h2>\n<p>프로젝트를 진행하며 사용자에게 로그인을 유지시켜 주기 위해서 JWT 를 사용한 적이 있어요. 그 때 인증과 인가의 개념을 헷갈렸던 기억이 있어서 다시한번 복기 할 겸 정리해보기로 했습니다.</p>\n<h2 id=\"인증\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D\" aria-label=\"인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증</h2>\n<p>인증 단계에서는 사용자의 신원을 확인하는 단계입니다. 처음 회사에 들어가면 회사 사람인지 확인하고 출입증을 주는 행위를 신원확인 단계라고 할 수 있을 것 같아요. 핸드폰 FaceID 로도 핸드폰의 주인이 맞는지 인증하는 것도 예시로 들 수 있을 것 같아요.  ㅎㅎ</p>\n<p>서버에서 인증 처리는 다양하게 <code class=\"language-text\">쿠키, 세션, 토큰</code> 등등 으로 할 수 있는데요. 위 세가지의 특성에 대해서 알아보겠습니다.</p>\n<h3 id=\"쿠키-세션-토큰의-등장-배경\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4-%EC%84%B8%EC%85%98-%ED%86%A0%ED%81%B0%EC%9D%98-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD\" aria-label=\"쿠키 세션 토큰의 등장 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키, 세션, 토큰의 등장 배경!</h3>\n<p>통신을 할 때 과거 히스토리까지 전부 담에서 네트워크를 넘나들면 요청 자체가 너무 무거워지고, 해당 기록이 유실될 경우 원활한 통신이 어렵기 때문에 <code class=\"language-text\">HTTP 통신은 무상태성(statusless)이라는 특징을 가지고 있어요.</code>  비연결성도 하나의 특징이랍니다. 이렇게 된다면 모든 요청 때 마다 ID ,PW 를 입력하여 사용자 인증을 해야하는 불편함이 생길거예요. 그래서 이런 부분들을 해소하기 위해서 쿠키, 세션, 토큰이 등장하기 시작했어요.</p>\n<h3 id=\"쿠키\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4\" aria-label=\"쿠키 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키</h3>\n<p>쿠키는 <code class=\"language-text\">사용자 정보를 사용자의 브라우저에 저장</code>시키는데요. 서버는 클라이언트의 로그인 요청에 대한 응답을 작성할 때 클라이언트 측에 <code class=\"language-text\">저장하고 싶은 정보를 set-cookie 에 담아</code> 놓습니다. 간편한 쿠키 발행과 연결 유지라는 장점이 있으나, 쿠키가 탈취되면 사용자의 정보도 탈취되고, 사용자인 척 서비스에 접근해 특정 작업을 수행할 수 있으니 보안에 취약하다는 단점이 있습니다.</p>\n<h3 id=\"세션\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98\" aria-label=\"세션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세션</h3>\n<p>위에 사용자 정보 탈취라는 문제를 해결하기 위해서 세션은 비밀번호와 같은 인증번호를 쿠키에 저장하지 않고 <code class=\"language-text\">사용자 식별자인 세션 ID를 저장합니다</code>. 최초 로그인 시 서버에서 세션을 발급하여 세션 스토리지에 저장해두고, 요청이 들어왔을 때 올바른 세션 ID 인지 확인 후 로그인을 시켜주는 방식입니다. 세션은 서버에 저장되기 때문에 사용자가 수만명으로 늘어난다면 <code class=\"language-text\">서버에 부하</code>가 갈 수 있고 분산 DB 환경에서 세션 유실이 일어날 수도 있습니다.</p>\n<h3 id=\"토큰\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0\" aria-label=\"토큰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰</h3>\n<p>토큰은 DB에 데이터를 저장하는 것이 아니라 토큰 자체에 사용자 고유 식별값을 넣어서 모든 요청시 토큰을 주고 받으면서 인증 처리를 합니다.</p>\n<p>토큰은 <code class=\"language-text\">머리(header)</code>, <code class=\"language-text\">가슴(payload)</code>, <code class=\"language-text\">배(signature)</code> 로 나눠지며 헤더에는 사용자 고유정보를 암호화할 알고리즘이 무엇인지 담고 있어요. 페어로드에는 사용자 고유 값과, 주고 받고 싶은 내용, 만료 시간 등이 있고요. 시그니처는 사용자가 발급한 주체를 명시하는 내용이에요.</p>\n<p>정리하면 페이로그에 있는 내용을 시그니처와 섞어서 헤더에 있는 암호 알고리즘으로 암호화 한 내용을 담은것이 토큰이라고 합니다.</p>\n<h3 id=\"토큰-장점\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0-%EC%9E%A5%EC%A0%90\" aria-label=\"토큰 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰 장점</h3>\n<ul>\n<li>시그니처를 알 수 없다면 위변조를 막을 수 없어요.</li>\n<li>인증 정보에 대한 별도의 관리가 필요 없어요.</li>\n<li>토큰이 한번 발급되면 만료될 때까지 사용할 수 있어요.</li>\n</ul>\n<h3 id=\"토큰의-단점\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"토큰의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰의 단점</h3>\n<ul>\n<li>쿠키, 세션과 마찬가지로 탈취되면 위험해요.</li>\n<li>강제로 토큰을 만료시켜버릴 수 없기 때문에 만료 시간을 짧게 가져야해요.</li>\n<li>페이로드에는 중요한 정보를 담으면 안된다.</li>\n</ul>\n<h3 id=\"해결-방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법</h3>\n<ul>\n<li>\n<p>리프레쉬 토큰</p>\n<p>토큰과 리프레쉬 토큰을 함께 발급하고, 리프레쉬 토큰은 서버에 저장해두었다가 토큰이 만료되면 리프레쉬 토큰을 확인하여 토큰을 새로 발급해준다.</p>\n</li>\n<li>\n<p>Sliding Session</p>\n<p>지속적으로 사용하고 있는 사용자에게 만료기간을 늘려준다.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"인가\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EA%B0%80\" aria-label=\"인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인가</h2>\n<p>사용자를 식별했다면, 사용자의 권한에 따른 접근 허가도 필수인데요.  예를 들면 관리자 권한이 있는 사람만 일반 사용자의 데이터를 전체 다 볼 수 있게한다던가. 로그인을 한 사용자가 사장님인지, 손님인지에 따라서 사장님 페이지에 접근을 할 수 있는 권한을 주는 등 <code class=\"language-text\">권한을 부여하는 것을 인가</code>라고 합니다.</p>\n<h3 id=\"토큰을-사용한-인가-방식\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9D%B8%EA%B0%80-%EB%B0%A9%EC%8B%9D\" aria-label=\"토큰을 사용한 인가 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰을 사용한 인가 방식</h3>\n<p>토큰의 페이로드 부분에 사용자 식별자 외에도 다른 데이터를 넣을 수 있는데요! 이 점을 활용해서 사용자의 권한 정보를 함께 넣어두고 토큰이 유효한지 확인할 때, 페이로드를 디코딩하여 권한 검증까지 함께 할 수 있습니다.</p>\n<p>이전에 프로젝트 할 당시 페이로드에 사용자 권한 정보를 넣어두고 그 값을 <code class=\"language-text\">Spring RequestScope</code> 에 담아서 요청에 대한 권한 확인이 필요할 때마다 그 값이 권한이 있는지를 확인하는 작업들을 했었어요. 그 작업들은 Spring AOP 를 사용하여 <code class=\"language-text\">OnlyAdmin</code> 과 같이 어노테이션 기반으로 동작가능하게 했어요.</p>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<p>간단하게 인증은 사용자를 식별하는 것, 인가는 사용자의 권한을 부여하는 행위라고 이해하고 있었는데, 구체적인 장단점을 떠올려보니 다음 작업을 할 때에 더 이유있는 코드를 작성할 수 있을 것 같아요.</p>","frontmatter":{"date":"December 22, 2022","title":"인증과 인가","categories":"보안","author":"수달","emoji":"🙂"},"fields":{"slug":"/spring/"}},"prev":{"id":"498164bb-301b-595f-9339-9f38e114d3ef","html":"<h2 id=\"학습-동기\" style=\"position:relative;\"><a href=\"#%ED%95%99%EC%8A%B5-%EB%8F%99%EA%B8%B0\" aria-label=\"학습 동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>학습 동기</h2>\n<p>12월 말에 한해를 돌아보았는데, 내가 이룬 업적이 있는가에 대한 회의가 들었어요. 일 년간 잘 지내왔다고 생각했는데 문득 찾아오는 불안감에 대해서 이유를 알고 마음을 다독이고자 읽게 되었습니다.</p>\n<h3 id=\"우리는-실제로-궁핍한가\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%A6%AC%EB%8A%94-%EC%8B%A4%EC%A0%9C%EB%A1%9C-%EA%B6%81%ED%95%8D%ED%95%9C%EA%B0%80\" aria-label=\"우리는 실제로 궁핍한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우리는 실제로 궁핍한가?</h3>\n<blockquote>\n<p>현대 사회로 들어서며 부, 식량, 과학 지식, 소비 물자, 신체적 안전, 기대 수명, 경제적 기회 등이 증가했다는 사실은 분명하지만\n그렇기 때문에 먹고 살기 바빠 등한시 했던 지위로 인한 불안 수준이 높아졌어요. 실제적 궁핍은 급격하게 줄었지만, 역설적이게도\n궁핍감과 궁핍에 대한 공포는 사라지지 않았고, 외려 늘어나기까지 했죠. 농사를 지으며 변덕스러운 땅을 경작하던 조상들은 도저히 상상도\n하지 못할 부와 가능성의 축복을 받은 사람들이 놀랍게도 자신이 모자란 존재이고, 자신의 소유도 충분치 못하다는 느낌에 시달리게 된\n것입니다. -p.60</p>\n</blockquote>\n<p>이 부분을 읽고 내가 누리는 삶과 환경에 감사해야하는데, 더 나음을 바라면서  나 자신을 괴롭게 하고 있지 않았나라는 깨달음이 있었어요. 처음 개발자를 하기로 마음 먹었을 때, 학습 방법이 정립이 안되어 있었을 때, 개발에 대한 내 주관이 없던 시절을 떠올리면 지금 주도적인 개발을하고, 이유있는 코드를 구현하고 있음에 감사해야겠다는 생각을 했습니다.</p>\n<h3 id=\"충분하다는-의미는-주관적이다\" style=\"position:relative;\"><a href=\"#%EC%B6%A9%EB%B6%84%ED%95%98%EB%8B%A4%EB%8A%94-%EC%9D%98%EB%AF%B8%EB%8A%94-%EC%A3%BC%EA%B4%80%EC%A0%81%EC%9D%B4%EB%8B%A4\" aria-label=\"충분하다는 의미는 주관적이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>충분하다는 의미는 주관적이다.</h3>\n<blockquote>\n<p>우리가 충분하다고 판단하는 심리를 생각해보면 박탈감도 그리 이상한 것이 아니다. 예를 들면 부나 존중의 적절한 수준은 결코 독립적으로\n결정되지 않는다. 그것은 준거집단, 즉 우리와 같다고 여기는 사람들의 조건과 우리의 조건을 비교하여 결정된다. 그렇기 때문에 우리가\n가진 것 자체만으로 평가할 수 없고, 조상의 생활과 비교하여 판단할 수도 없다.  오직 우리가 함께 자라고, 일하고, 친구로 사귀고\n공적인 영역에서 동일시 하는 만큼의 사람들 정도 가졌을 때, 혹은 그거보다 조금 더 가졌을 때 우리는 충분하다고 느낀다.</p>\n</blockquote>\n<blockquote>\n<p>설사 웃풍이 심하고 비위생적인 오두막에 살면서 크고 따듯한 성에사는 귀족의 지배의 시달린다고 해도. 우리와 동등한 사람들이 우리와\n똑같이 사는 것을 본다면 우리의 조건은 정상이라고 생각할 것이다. 물론 괴로운 조건이기는 하지만, 여기에서 질투심이 생겨나는 일은\n드물다. 평소에 잘 지낸다고 해도 동창회에 나갔다가 친구들이 나보다 돈을 더 잘번다고하면 갑자기 불행하다고 느끼는 것처럼.</p>\n<ul>\n<li>p.65~</li>\n</ul>\n</blockquote>\n<p>함께 공부를 하던 친구들이 취업을하고, 또 좋은 소식을 가져올 때면 불안한 마음이 들때가 있어요. 제가 생각하는 충분하다의 기준이 친구들에게 있기 때문이었네요. 오늘 불안이라는 키워드로 잠시 대화를 나눈 순간이 있었어요. 그 친구가 불안은 평생  느끼는 것이라고 했는데 정말 맞는 말이었네요. 저는 요새 이런 불안함을 친한 친구처럼 곁에 두고 성장의 동력으로 삼고자 하고 있어요. 불안하기 때문에 무언가를 지속하고, 때로는 이것이 행복을 만들어주는 경험을 꽤 자주 했었거든요. 불안하면 곧 행복해져요. 설사 힘든 일이 찾아와도 시간이 지나면 행복이 찾아올거에요.</p>\n<h3 id=\"모두에게-질투하지는-않는다\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%91%90%EC%97%90%EA%B2%8C-%EC%A7%88%ED%88%AC%ED%95%98%EC%A7%80%EB%8A%94-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"모두에게 질투하지는 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모두에게 질투하지는 않는다.</h3>\n<blockquote>\n<p>우리가 매일 마주치는 수많은 불평등을 고려할 때 질투의 가장 두드러진 특징은 우리가 모두를 질투하지 않는다는 사실이다. 엄청난 축복을\n누리며 살아도 전혀 마음이 쓰이지 않는 사람들이 있는가하면, 우리보다 약간 더 나을 뿐인데도 끔찍한 괴로움에 시달리게 만드는 사람들도\n있다. 우리는 우리 자신이 같다고 느끼는 사람들만 질투한다. 가장 견디기 힘든 성공은 가까운 친구들의 성공이다.</p>\n</blockquote>\n<p>우리는 우리에게서 먼 것과 우리가 자신을 비교하지 않아요. 가까운 것들과 비교하죠. 힘든 일이 있다면 잠시 멀리하는 것도 좋아요. 그리고 견딜 힘이 있을 때 마주해보세요.</p>\n<h3 id=\"모든-일에-성공을-거두어야만-행복한가\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%A0-%EC%9D%BC%EC%97%90-%EC%84%B1%EA%B3%B5%EC%9D%84-%EA%B1%B0%EB%91%90%EC%96%B4%EC%95%BC%EB%A7%8C-%ED%96%89%EB%B3%B5%ED%95%9C%EA%B0%80\" aria-label=\"모든 일에 성공을 거두어야만 행복한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모든 일에 성공을 거두어야만 행복한가?</h3>\n<blockquote>\n<p>제임스는 우리가 하는 모든 일에서 성공을 거두워야만 우리 자신에게 만족하는 것은 아니라고 생각했다. 또 어떤 일에서 실패를 한다고\n해서 반드시 수모를 느끼는 것 또한 아니라고 생각했다. 우리의 자존심과 가치관을 걸고 어떤 일을 했는데 그 일을 이루지 못했을 경우에만\n수모를 느낀다. 무엇을 승리로 해석하느냐 무엇을 실패로 간주하느냐를 결정하는 건 우리의 목표다.</p>\n</blockquote>\n<blockquote>\n<p>시도가 없으면 실패도 없고, 실패가 없으면 수모도 없다. 따라서 이 세계에서 자존심은 전적으로 자신이 무엇이 되도록 또 무슨 일을\n하도록 스스로를 밀어붙이느냐에 달려 있다. 이것은 우리가 상상하는 자기 자신의 잠재력에 대한 실제 성취비율에 있다.  자존심은\n내세운것/ 이룬것 이다. 우리의 자존심을 높일 수 있는 두가지 방법이 있다. 하나는 더 많은 성취를 거두기 위해 노력하는 것이고, 또\n하나는 성취하고 싶은 일의 수를 줄이는 것이다.<br>\n-65.p ~ 80.p</p>\n</blockquote>\n<p>요새 함께하는 계절학기 친구들이 있어요. 각자 꿈을 위해서 하루 하루를 열심히 지내고 있어요. 이 친구들과 있다보면 이따금 뭐든 해내겠다는 느낌을 받아요. <code class=\"language-text\">시도가 없으면 실패도 없고 성취도 없겠죠.</code>  잠재력이 있는 사람이 그것을 드러낼 수 있으려면 무슨일이 되도록 스스로를 자꾸만 움직여야해요. 그 과정에서 실패를 겪고 수모를 느껴도 “너 잘될거야.” 하며 스스로를 잘 다독여가면서요. ㅎㅎ 요새 가장 많이 하는 말이에요. 어떻게든 되겠지. 잘될거야! 이 글도 나중에 보며 그때 그랬었지하고 회상할 수 있는 순간이 찾아오면 좋겠네요.</p>","frontmatter":{"date":"December 22, 2022","title":"[알랭 드 보통-불안] 3장 기대  (평등, 기대, 선망)","categories":"독서","author":"수달","emoji":"🙂"},"fields":{"slug":"/etc3/"}},"site":{"siteMetadata":{"siteUrl":"https://her0807.com","comments":{"utterances":{"repo":"https://github.com/her0807/her0807.github.io"}}}}},"pageContext":{"slug":"/java4/","nextSlug":"/spring/","prevSlug":"/etc3/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}